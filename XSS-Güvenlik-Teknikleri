- XSS (Cross-Site Scripting) açıklarını tamamen kapatmak için genellikle sadece bir teknik yeterli olmayabilir. Her bir yöntem farklı senaryolarda etkilidir ve genellikle birden fazla teknik kullanılması önerilir.

      #### 1. Girdi Doğrulama ve Temizleme

- Kullanıcıdan gelen verileri doğrulamak ve temizlemek XSS risklerini azaltabilir. Örneğin, sadece belirli karakterlere izin verebilirsiniz.

// Örnek: Kullanıcının yalnızca harf ve rakam girmesine izin verme
function sanitizeInput(input) {
    return input.replace(/[^a-zA-Z0-9]/g, '');
}

let userInput = "<script>alert('XSS');</script>";
let safeInput = sanitizeInput(userInput);
console.log(safeInput); // Çıktı: "alertXSS"


      #### 2. HTML Özelliklerinde Kullanım

- HTML özniteliklerinde dinamik veri kullanırken, textContent veya setAttribute gibi güvenli yöntemler kullanmak iyi bir yaklaşımdır.

// Kullanıcı verisini HTML öğesine güvenli bir şekilde ekleme
let userInput = "<script>alert('XSS');</script>";
let div = document.createElement('div');
div.textContent = userInput; // Metin olarak eklenir, XSS riskini azaltır
document.body.appendChild(div);


      #### 3. HTML Özniteliklerinde Güvenlik

- HTML özniteliklerinde dinamik veri kullanırken, setAttribute gibi yöntemlerle veriyi eklemek daha güvenlidir.

// Dinamik veri eklerken `setAttribute` kullanma
let userInput = "http://example.com?param=<script>alert('XSS');</script>";
let link = document.createElement('a');
link.setAttribute('href', userInput); // Güvenli bir şekilde özniteliğe ekler
document.body.appendChild(link);


      #### 4. JavaScript Şablonları

- Şablon motorları veya innerHTML gibi dinamik HTML oluşturma yöntemlerinden kaçının. Bunun yerine, güvenli yöntemler kullanın.

// Dinamik HTML oluşturma sırasında dikkatli olma
let userInput = "<script>alert('XSS');</script>";
let div = document.createElement('div');
div.innerText = userInput; // innerText veya textContent kullanarak XSS riskini azaltma
document.body.appendChild(div);


      #### 5. Content Security Policy (CSP)

- Tarayıcı bazında XSS risklerini azaltmak için CSP kullanabilirsiniz.

<!-- CSP ile güvenlik ekleme -->
<meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self';">


      #### 6. Escape Etme

- HTML içeriği dinamik olarak oluşturulurken, kullanıcı verilerini uygun şekilde kaçırmak önemlidir.

// HTML karakterlerini kaçırma
function escapeHtml(text) {
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, function(m) { return map[m]; });
}

let userInput = "<script>alert('XSS');</script>";
let safeInput = escapeHtml(userInput);
let div = document.createElement('div');
div.innerHTML = safeInput; // Kaçırılmış HTML içeriği eklenir
document.body.appendChild(div);


      #### 7. DOMPurify Kullanımı

DOMPurify, güvenli bir şekilde HTML içeriği temizlemek için kullanılan bir kütüphanedir. Kullanıcıdan gelen verileri temizlemek için kullanabilirsiniz.

// DOMPurify kullanarak XSS risklerini azaltma
// DOMPurify'yi npm veya CDN ile eklemeyi unutmayın
// <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/2.3.6/purify.min.js"></script>

let userInput = "<script>alert('XSS');</script>";
let cleanInput = DOMPurify.sanitize(userInput);
let div = document.createElement('div');
div.innerHTML = cleanInput;
document.body.appendChild(div);

      #### 8. iframe Kullanımı

Kullanıcıdan gelen verileri tamamen izole bir ortamda görüntülemek için iframe kullanabilirsiniz. Bu, XSS risklerini sınırlayabilir.

// Kullanıcı verilerini güvenli bir şekilde `iframe` içinde gösterme
let userInput = "<script>alert('XSS');</script>";
let iframe = document.createElement('iframe');
iframe.srcdoc = `<html><body>${userInput}</body></html>`;
document.body.appendChild(iframe);


      #### 9. HTTP Header Güvenliği

HTTP başlıkları, XSS risklerini azaltmak için sunucu tarafında güvenlik ekleyebilir. Örneğin, X-XSS-Protection ve X-Content-Type-Options başlıklarını kullanabilirsiniz.

// Sunucu tarafında HTTP başlıklarını ekleme
X-XSS-Protection: 1; mode=block
X-Content-Type-Options: nosniff


      #### 10. JavaScript Kütüphaneleri ve Framework'ler

Modern JavaScript framework'leri ve kütüphaneleri (örneğin, React, Angular, Vue) genellikle XSS'den korunmak için güvenli yöntemler ve API'ler sunar. Bu framework'lerin HTML yerleştirme yöntemlerini kullanmak daha güvenlidir.

// React örneği
import React from 'react';

function App() {
    const userInput = "<script>alert('XSS');</script>";
    return (
        <div>
            {/* React, içeriği otomatik olarak kaçırır */}
            <div>{userInput}</div>
        </div>
    );
}


      #### 11. eval() ve Function Kullanımından Kaçınma

JavaScript kodlarını dinamik olarak çalıştırmak için eval() veya Function kullanmaktan kaçının, çünkü bu XSS risklerini artırabilir.

// Kötü örnek: `eval` kullanımı
let userInput = "alert('XSS')";
eval(userInput); // Tehlikeli! Kullanımdan kaçının

// Güvenli örnek: `eval` yerine güvenli API kullanma
function safeFunction(userInput) {
    // Kullanıcı girişini işleme
}


      #### 12. JavaScript Kodları ile document.createElement ve appendChild Kullanımı

Dinamik olarak HTML öğeleri oluştururken, createElement ve appendChild gibi yöntemler kullanarak kullanıcı verilerini güvenli bir şekilde ekleyebilirsiniz.

// Güvenli yöntemle HTML öğesi oluşturma
let userInput = "<script>alert('XSS');</script>";
let div = document.createElement('div');
div.textContent = userInput; // `textContent` kullanarak XSS riskini azaltma
document.body.appendChild(div);
