###KURULUM

sudo apt install update
sudo apt install upgrade

sudo apt install docker.io => yüklemek
sudo systemctl enable --now docker => aktif hale getirmek
docker --version => versiyonu
sudo docker run hello-world => çalıştığını görmek

sudo docker run -it ubuntu bash => ubuntu işletim sistemini container haline getirip bash ile bağlanmak.
apt-get update => root olarak containerden update

####TEMEL KOMUTLAR

docker info
docker ps
docker ps -a => çalışan veya exited dockerları göster.
docker run centos:7 echo "Hello World"
docker run centos:7 ps -ef
docker container ls
docker container ls -a

sudo docker container run -it centos:7 bash
yum -y update
tüm linux komutları artık çalışabilir ve kurulum yapılabilir.

####TEMEL KOMUTLAR
docker container start $containerid => daha önce kaydedilmiş bir konteyneri açmak(ps -a ile görüntüledik.)
docker container exec $containerid => start ettikten sonraki başlatma.
docker container exec -it $containerid bash (interactive tty connection şeklinde run etmek.)

docker container ls -a
docker container ls -a --no-trunc
docker container ls -a -q => sadece container idleri getir.
docker container ls -l => son containeri getirir.
docker container ls -a --filter "" => arama yapabiliriz.
docker container run centos:7 ping 127.0.0.1 -c 10 => ping atmak (containerin exited moda düşüp düşmediğinin tespiti.)
docker container logs $containerid => loglara bakmak.
docker container attach $containerid => canlı izleme ^cile sonlandırırsak containerimiz exited moda düşer.
docker container logs --tail 10 $containerid => çalışan containerdeki son 10 logu gösterir.
docker container logs -f $containerid


docker container run -d tomcat => hub.docker.com'dan docker olarak tomcati  kurar.
docker ps => container kontrolü yaptık kurulmuş mu
docker container stop $containerid
docker container ls -a => durdurulmuş containeri status kısmından görebiliriz.
docker container start -a $containerid
^c ile conteineri kapattık
docker container start $containerid tekrar başlattık
docker container logs -f $containerid => canlı olarak izlemek istersek.
^c ile sonlandırırsak container burada devam eder.
docker ps ile kontrol edilir.

docker container kill $containerid ile containeri 10saniye içerisinde shut down ediyoruz. stopla arasındaki fark bu.
docker container inspect $containerid => docker containeri hakkında tüm bilgileri gösterir.
docker container inspect $containerid | grep IPAddress => grepleme yapabiliriz.

####KAPSAYICI DURDURMA SİLME İŞLEMLERİ
docker container rm $containerid => çalışmayan bir containeri kaldırır.
docker container stop $containerid => çalışan containeri silmek için.

####DOCKER PORT MAPPING
docker container run -d nginx => nginx containeri oluşturduk.
docker ps => kontrol
docker container run -d -p 5000:80 nginx => 5000 host port 80 container port (eğer sadece 80/tcp yapılırsa container için açılmış olur.)
docker ps => kontrol
docker container port $containerid => host ve container port görünür.
vi Dockerfile => dockerfile dosyası oluşturarak port açma (vi ile açılan dosya içerisine alt alta FROM nginx EXPOSE 80) :wq ile kapattık.
docker image build -t my_ngix . => nginx imagemizi create ettik.
docker container run -d -P my_nginx => expose ettiğimiz portları dockerde çalıştırmak için.
docker ps => çalıştığını kontrol.

####DOCKER PLUGIN
docker plugin install $buraya dokcerhobdatcomdan aldığımız plugini yapıştıracağız
docker plugin ls
docker plugin disable $plugin
docker plugin enable $plugin
docker plugin inspect $plugin
plugini önce disable ediyoruz sonra rm komutuyla kaldırıyoruz.
docker plugin disable $plugin
docker plugin rm $plugin

####DOCKERHUB
docker search mysql => arama
docker pull mysql => image indirilir

###DOCKERREPOSITORY
Public ve Private olarak 2 repo oluşturulabilir.
docker login => pub.docker.com bağlantısı. (public için şifre istemez private için şifre girilmesi gerekir.)

####Dockerfile KOMUTLARI
vi Dockerfile => oluştur.
FROM centos:7 veya FROM nginx => FROM komutu base image ve base uygulamalarımızı çekmek için kullandığımız komut.
RUN yum -y update => RUN komutu : ilgiliuygulama içerisinde çalıştırmak istediğimiz processleri çalıştırmak için kullandığımız komuttur.
RUN yum -y install nano => nano paketlerinin kurulumu gerçekleşir.
CMD ping -c 10 127.0.0.1 => CMD : docker conteinarı ayağa kalktığında çalıştırılacak komuttur.
CMD ["/bin/echo"] => ulaşmak istediğimiz dizine gider.
docker image build --tag btk . => dockerfilede ayarladğımız şekilde image dosyası oluşturuldu.
docker images => create edilen imageler görülür.
docker container run -it btk bash btk imajından bir container başlatmak için.(artık nano komutu çalıştırılabilir.)

LABEL $key $value => key ve value değerlerine image sahibinin meta-data bilgilerini girebiliriz.
MAINTAINER $mailadresi,telefon,isim vs. => image sahibinin bilgileri yazılabilir.
EXPOSE 80/UDP => containeri harhangi bir port üzerinden yayın yapması için.
ENV => containerde ortam değişkeni tanımlamak için kullanılır.
ADD /bin/xyz /bin/abc => içerisine kopyalar.
COPY $hostkaynağından alınanveri $/bin/xyz => copy komutunun addden farkı sadece dış kaynaktan kopyalama yapıyor olmasıdır.
ENTRYPOINT <$$> => container çalıştığında varsayılan bir parametre tanımı yapmak için kullanılan komuttur.(cmd echo çıktısını sabitlemek için kullanılabilir.)
VOLUME /MOUNT => containerlerdeki datanın kesinlikle silinmemesi için gerekli olan komuttur.volume path tanımlanması gerekir.
USER => Container üzerinde hangi kullanıcı üzerinden işlem yapılacağı belirtilir.
WORKDIR /www/html => Conteinerlerin çalışma dizinini belirlemek için kullanılır.(bir http sunucusunu hangi klasör altında çalışacağını belirtiyoruz.)
MKDIR => Klasör tanımlama işlemi için komuttur.


